<?xml version="1.0" encoding="UTF-8"?>  
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">  
    <display-name>myapp</display-name>  
    <welcome-file-list>  
        <welcome-file>index.jsp</welcome-file>  
    </welcome-file-list>  
    
    <!-- 1. use original servlet usage -->
    <!-- 
    <servlet>
    	<servlet-name>HelloWorld</servlet-name>
    	<servlet-class>com.alioverview.webui.HelloWorldServlet</servlet-class>
    </servlet>
    <servlet-mapping>
    	<servlet-name>HelloWorld</servlet-name>
    	<url-pattern>/helloworld</url-pattern>
    </servlet-mapping>
     -->
    
    <!-- 2. use SSH framework  -->
    <!-- SSH - Strut1/Struts2 + Spring + Hibernate -->
    <!-- SSH - SpringMVC + Spring + Hibernate -->
    <!-- Struts 1 and Struts 2 and Springmvc are can act as controller layer. -->
    
    <!-- ///////////////////////////////////////////////////////////-->
    <!-- ///2.1 if use struts, the configuration as below. START ///-->
    <!-- ///////////////////////////////////////////////////////////-->
    
    <!-- struts1 configuration -->
    
    
    <!-- struts2 configuration -->
    <!-- 
    <filter>  
        <filter-name>struts2</filter-name>  
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>  
    </filter>  
  
    <filter-mapping>  
        <filter-name>struts2</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>  
    -->
    <!-- ///////////////////////////////////////////////////////////-->
    <!-- ///2.1 if use struts, the configuration as below. END   ///-->
    <!-- ///////////////////////////////////////////////////////////-->
   
    
    
    <!-- /////////////////////////////////////////////////////////////-->
    <!-- ///2.2 if use springmv, the configuration as below. START ///-->
    <!-- /////////////////////////////////////////////////////////////-->
	<!-- Spring分为多个文件进行分别的配置，其中在servlet-name中如果没有指定init-param属性，-->
	<!-- 那么系统自动寻找的spring配置文件为[servlet-name]-servlet.xml。当需要载入多个spring相关的配置文件时，-->
	<!-- 首先加载ContextLoaderListener类，再指定context-param中指定多个spring配置文件，使用逗号分别隔开各个文件。 -->
	<!-- 为了使用方便可以将配置文件进行MVC式的分解，配置控制器controller的Bean的配置文件放置在一个xml文件中，-->
	<!-- 配置service的Bean放在service.xml文件中。-->
	<!-- <servlet-mapping>指定的该servlet接管的url的行为，此处为了简便起见使用*.*,则表示在URL只要是在本机使用的任何request都是由该dispatchServlet来处理。 -->
	<!-- para-value: classpath*:applicationContext.xml -->
	<!-- <param-value>/WEB-INF/config/applicationContext-hibernate.xml,/WEB-INF/controllers.xml,/WEB-INF/service.xm</param-value> -->
    <listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>   
    </listener>  
    <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>/WEB-INF/config/applicationContext-hibernate.xml</param-value>  
    </context-param>  

	<servlet>
		<servlet-name>dispatch</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/applicationContext-hibernate.xml</param-value>  
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatch</servlet-name>  
		<url-pattern>*.*</url-pattern>  
	</servlet-mapping>
	<!-- /////////////////////////////////////////////////////////////-->
    <!-- ///2.2 if use springmv, the configuration as below. END   ///-->
    <!-- /////////////////////////////////////////////////////////////-->
    
</web-app>